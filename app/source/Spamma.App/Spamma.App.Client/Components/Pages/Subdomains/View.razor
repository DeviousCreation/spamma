@page "/View"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Spamma.App.Client.Infrastructure.Constants
<h3>View</h3>

<Card>
    <CardHeader>
        Details
    </CardHeader>
    <CardBody>
        <CardText>
            @if(_subdomain is not null)
            {
                <p>Id: @_subdomain.Id</p>
                <p>Name: @_subdomain.Name</p>
            }
            else
            {
                <p>Loading...</p>
            }
        </CardText>
    </CardBody>
</Card>
<Card>
    <CardHeader>
        Access
        <Button Color="ButtonColor.Primary" Type="ButtonType.Button" @onclick="OnAddUserClick">Add User</Button>
    </CardHeader>
    <CardBody>

        <CardText>
            <QuickGrid @ref="_domainAccessGrid" ItemsProvider="@_domainAccessItemProvider" Pagination="@_domainAccessPagination">
                <PropertyColumn Property="@(p => p.EmailAddress)" Sortable="false" />
                <PropertyColumn Property="@(p => p.Type)" Sortable="false" />
                <PropertyColumn Property="@(p => p.WhenAssigned)" Sortable="false" />
                <TemplateColumn>
                    <Dropdown Color="DropdownColor.Primary" Split="true">
                        <DropdownActionButton @onclick="() => this.OnChangeAccessClick(context)">Change Access</DropdownActionButton>
                        <DropdownToggleButton />
                        <DropdownMenu>
                            <DropdownItem Type="DropdownItemType.Button" @onclick="() => this.OnRemoveAccessClick(context)">Revoke</DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </TemplateColumn>
            </QuickGrid>
        </CardText>
        <CardFooter>
            <Paginator State="@_domainAccessPagination" />
        </CardFooter>
    </CardBody>
</Card>


<Card>
    <CardHeader>
        Chaos Monkey Addresses
        <Button Color="ButtonColor.Primary" Type="ButtonType.Button" @onclick="OnAddChaosMonkeyClick">Add</Button>
    </CardHeader>
    <CardBody>

        <CardText>
            <QuickGrid @ref="_chaosMonkeyGrid" ItemsProvider="@_chaosMonkeyItemProvider" Pagination="@_chaosMonkeyPagination">
                <PropertyColumn Property="@(p => p.EmailAddress)" Sortable="false" />
                <PropertyColumn Property="@(p => p.ChaosMonkeyType)" Sortable="false" />
                <TemplateColumn>
                    <Button Color="ButtonColor.Primary" Type="ButtonType.Button" @onclick="() => OnChaosMonkeyAddressDisableClick(context)">Delete</Button>
                </TemplateColumn>
            </QuickGrid>
        </CardText>
        <CardFooter>
            <Paginator State="@_chaosMonkeyPagination" />
        </CardFooter>
    </CardBody>
</Card>


<Offcanvas @ref="_addUserOffcanvas" title="Invite User">
    <BodyTemplate>
        <EditForm Model=@_addUserModel OnSubmit="this.OnAddUserSubmit">
            <div class="form-group">
                <label for="user">User</label>
                <AutoComplete
                    Id="user"
                    @bind-Value="@_addUserModel.SelectedUserId"
                              TItem="UserLookup"
                              DataProvider="UserLookupDataProvider"
                              PropertyName="Name"
                    Placeholder="Search a user..."
                    OnChanged="UserLookupChanged"/>
            </div>

            <div class="form-group">
                <label for="user-level">Access Level</label>
                <InputSelect id="user-level" @bind-Value="@_addUserModel.Type">
                    <option value="@SubdomainAccessPolicyType.Unknown">Please Select</option>
                    <option value="@SubdomainAccessPolicyType.Administrator">Administrator</option>
                </InputSelect>
            </div>
            
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
        
    </BodyTemplate>
</Offcanvas>


<Offcanvas @ref="_changeAccessOffcanvas" title="Change User">
    <BodyTemplate>
        <EditForm OnSubmit="this.OnChangeAccessSubmit">
            <p>This will change the current access level for @_changeAccessModel.Name, it is current set to @_changeAccessModel.Type.</p>
            <div class="form-group">
                <label for="@($"{nameof(ChangeAccessModel.Type)}-user-level")">Access Level</label>
                <InputSelect id="@($"{nameof(ChangeAccessModel.Type)}-user-level")" @bind-Value="@_changeAccessModel.Type">
                    <option value="@SubdomainAccessPolicyType.Unknown">Please Select</option>
                    <option value="@SubdomainAccessPolicyType.Administrator">Administrator</option>
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </BodyTemplate>
</Offcanvas>

<Offcanvas @ref="_addChaosMonkeyOffCanvas" title="Bring In The Chaos">
    <BodyTemplate>
        <EditForm Model=@_addChaosMonkeyModel OnSubmit="this.OnAddUserSubmit">
            <div class="form-group">
                <label for="user">Email Address</label>
                <InputText @bind-Value="@_addChaosMonkeyModel.EmailAddress"></InputText>
            </div>

            <div class="form-group">
                <label for="user-level">Access Level</label>
                <InputSelect id="user-level" @bind-Value="@_addChaosMonkeyModel.ChaosMonkeyType">
                    <option value="@ChaosMonkeyType.None">None</option>
                    <option value="@ChaosMonkeyType.InboxFull">Inbox Full</option>
                    <option value="@ChaosMonkeyType.NotFound">Not Found</option>
                </InputSelect>
            </div>
            
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
        
    </BodyTemplate>
</Offcanvas>